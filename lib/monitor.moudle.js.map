{"version":3,"file":"monitor.moudle.js","sources":["../src/typings/index.ts","../src/data/constants.ts","../src/helps/utils.ts","../src/helps/isSupported.ts","../src/helps/vitalsScore.ts","../src/helps/getNetworkInfo.ts","../src/helps/isLowEnd.ts","../src/helps/onVisibilityChange.ts","../src/config/index.ts","../src/data/report.ts","../src/helps/getNavigatorInfo.ts","../src/data/log.ts","../src/data/metrics.ts","../src/data/analyticsTacker.ts","../src/performance/observe.ts","../src/performance/paint.ts","../src/performance/storageEstimate.ts","../src/performance/performanceEntry.ts","../src/performance/navigationTiming.ts","../src/error/index.ts","../src/index.ts"],"sourcesContent":["/**\n * 监控入口参数\n * @param isPerformanceTiming - 是否开启性能监控\n * @param isResoureTiming - 是否开启资源监控\n * @param isErrorCapture - 是否开启异常监控\n * @param maxMeasureTime - 最大监控时间\n * @param upUrl - 上报url\n * @param analyticsTracker - 监控方法\n */\nexport interface YMonitorOptions {\n    isPerformanceTiming?: boolean;\n    isResoureTiming?: boolean;\n    isErrorCapture?: boolean;\n    maxMeasureTime?: number;\n    upUrl: string;\n    analyticsTracker?: (options: YAnalyticsTrackerOptions) => void;\n}\n\n// 监控配置参数\nexport interface YMonitorConfig {\n    isPerformanceTiming?: boolean;\n    isResoureTiming?: boolean;\n    isErrorCapture?: boolean;\n    maxTime?: number;\n    report: YMonitorReport;\n    analyticsTracker?: (options: YAnalyticsTrackerOptions) => void;\n}\n\n/**\n * 分析工具参数\n * @param metricName - 分析指标\n * @param data - 分析数据\n * @param eventProperties - 分析事件属性\n * @param navigatorInformation - \n * @param score - 分析评分\n */\nexport interface YAnalyticsTrackerOptions {\n    metricName: string;\n    data: YMonitorData;\n    customProperties: object;\n    navigatorInfo: YNavigatorInfo;\n    netWorkInfo?: YNetworkInfo;\n    score: YScore;\n}\n\n// 监控指标的相关信息\nexport type YMonitorData = YNavigationTiming | YConsumption;\n\n/**\n * 页面请求渲染时间\n */\nexport interface YNavigationTiming {\n  fetchTime?: number;\n  workerTime?: number;\n  totalTime?: number;\n  downloadTime?: number;\n  timeToFirstByte?: number;\n  headerSize?: number;\n  dnsLookupTime?: number;\n  tcpTime?: number;\n  whiteTime?: number;\n  domTime?: number;\n  loadTime?: number;\n  parseDomTime?: number;\n}\n\n// 监控资源类别\nexport interface YConsumption {\n  css: number;\n  img: number;\n  other: number;\n  script: number;\n  total: number;\n  beacon: number;\n  fetch: number;\n  xmlhttprequest: number;\n}\n\n// 网络类型\nexport type EffectiveConnectionType =\n  | '2g'\n  | '3g'\n  | '4g'\n  | '5g'\n  | 'slow-2g'\n  | 'lte';\n\n// 网络信息\nexport interface YNetworkInfo {\n  downlink?: number;\n  effectiveType?: EffectiveConnectionType;\n  onchange?: () => void;\n  rtt?: number;\n  saveData?: boolean;\n}\n\n/**\n * 浏览器信息\n * @param appName - 应用名称\n * @param appVersion - 应用版本\n * @param deviceMemory - 设备内存\n * @param hardwareConcurrency - cpu核数\n * @param serviceWorkerStatus - serviceWorker状态\n * @param isLowEndDevice - 是否低性能设备\n * @param isLowEndExperience - 是否体验欠佳设备\n */\nexport interface YNavigatorInfo {\n    appName?: string;\n    appVersion?: string;\n    deviceMemory?: number;\n    hardwareConcurrency?: number;\n    isLowEndDevice?: boolean;\n    isLowEndExperience?: boolean;\n    serviceWorkerStatus?: 'controlled' | 'supported' | 'unSupported';\n}\n\n// 评分等级\nexport type YScore = 'good' | 'needsImprovement' | 'poor';\n\n// 监控上报方法\nexport interface YMonitorReport {\n    sendToAnalytics(level: AskPriority, data: string, uri?: string): void;\n}\n\n// 优先级\nexport enum AskPriority {\n  URGENT = 1,\n  IDLE = 2,\n}\n\n// 上报参数\nexport type ReportOtions = {\n  upUrl: string;\n}\n\n// 错误类型枚举\nexport enum ErrorType {\n    'SCRIPT' = 1,\n    'PROMISE' = 2,\n    'NETWORK' = 3,\n    'RECORD' = 4\n}\n\n// 性能监控对象\nexport interface YPerObservers {\n  [measure:string]: any;\n}\n\n// 性能指标\nexport type YPerformanceObserverType = \n| 'paint'\n| 'first-input-delay'\n| 'largest-contentful-paint'\n| 'cumulative-layout-shift'\n| 'longtask'\n| 'element'\n| 'resource'\n| 'measure'\n| 'navigation'\n\n// 测量指标数据\nexport interface YMetricMap {\n  [measureName:string]: number;\n}\n\n// 测试资源入口\nexport interface YPerformanceEntry {\n  decodedBodySize?: number;\n  duration: number;\n  entryType: YPerformanceObserverType;\n  initiatorType?: YConsumption;\n  loadTime: number;\n  name: string;\n  renderTime: number;\n  startTime: number;\n  hadRecentInput?: boolean;\n  value?: number;\n  identifier?: string;\n}","interface Navigator {\n    appName: string\n    appVersion: string\n    estimate: any\n    storage: any\n    deviceMemory?: number\n    hardwareConcurrency?: number\n    connection?: string\n    effectiveType?: string\n    serviceWorker?: {\n        controller?: string\n    }\n    sendBeacon?: any\n}\nexport const W = window\nexport const D = document\nexport const C = W.console\nexport const WNav = (W.navigator as unknown) as Navigator\nexport const WPer = W.performance\n\n//内存\nexport const getMem = () => WNav.deviceMemory ?? 0\n//cpu核数\nexport const getCpu = () => WNav.hardwareConcurrency ?? 0\n","import { W } from '../data/constants';\n\n/**\n * pushTask - 将任务推入主线程空闲队列\n * @param cb - 执行的回调方法\n */\nexport const pushTask = function(cb: ()=> void) {\n    if ('requestIdleCallback' in W) {\n        (W as any).requestIdleCallback(cb, { timeOut: 3000 });\n    } else {\n        cb();\n    }\n}\n\n/**\n * formatByTwo - 格式化数值\n * @param num - 待格式化数值\n * @returns 保留2位小数位的数值\n */\nexport const formatByTwo = function(num: number): number {\n    return parseFloat(num.toFixed(2));\n}\n\n/**\n * convertToKB - 将字节转化位kb\n * @param byte - 字节长度\n * @returns kb大小\n */\nexport const convertToKB = function(byte: number): number|null  {\n    if (typeof byte !== 'number') return null;\n\n    return formatByTwo(byte / Math.pow(1024, 2));\n}","import { WPer, WNav, W, D } from '../data/constants';\n\n/**\n * True if the browser supports the Navigation Timing API,\n * User Timing API and the PerformanceObserver Interface.\n * In Safari, the User Timing API (performance.mark()) is not available,\n * so the DevTools timeline will not be annotated with marks.\n * Support: developer.mozilla.org/en-US/docs/Web/API/Performance/mark\n * Support: developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver\n * Support: developer.mozilla.org/en-US/docs/Web/API/Performance/getEntriesByType\n */\nexport const isPerformanceSupported = (): boolean => {\n  return WPer && !!WPer.getEntriesByType && !!WPer.now && !!WPer.mark && !!W.PerformanceObserver;\n};\n\nexport const isEstimateSupported = (): boolean => {\n  return WNav && WNav.storage && typeof WNav.storage.estimate === 'function';\n}\n\nexport const isVisibleChangeSupported = (): boolean => {\n  return typeof D.hidden !== \"undefined\";\n}\n","import { YScore, YMonitorData } from '../typings';\n\n// https://web.dev/vitals/\nconst fcpScope = [1000, 2500];\nconst lcpScope = [2500, 4000];\nconst fidScope = [100, 300];\nconst clsScope = [0.1, 0.25];\nconst tbtScope = [300, 600];\n\nexport const webVitalsScore: Record<string, number[]> = {\n    fp: fcpScope,\n    fcp: fcpScope,\n    lcp: lcpScope,\n    lcpFinal: lcpScope,\n    fid: fidScope,\n    fidVital: fidScope,\n    cls: clsScope,\n    clsFinal: clsScope,\n    tbt: tbtScope,\n    tbt5s: tbtScope,\n    tbt10s: tbtScope,\n    tbtFinal: tbtScope,\n}\n\nexport const getVitalScope = (measureName: string, value: YMonitorData): YScore => {\n    if (!webVitalsScore[measureName]) return null;\n\n    if (value <= webVitalsScore[measureName][0]) return 'good';\n\n    return value <= webVitalsScore[measureName][1] ? 'needsImprovement' : 'poor';\n} \n","import { YNetworkInfo } from \"../typings\";\nimport { WNav } from '../data/constants';\n\nexport const getNetworkInfo = function():YNetworkInfo  {\n    if ('connection' in WNav) {\n        const connection = (WNav as any).connection;\n\n        if (typeof connection !== 'object') return {};\n\n        return {\n            rtt: connection.rtt,\n            downlink: connection.downlink,\n            saveData: connection.saveData,\n            effectiveType: connection.effectiveType,\n        }\n    } else {\n        // 多谱勒测速\n    }\n}","import { EffectiveConnectionType } from '../typings';\nimport { WNav, getCpu, getMem } from \"../data/constants\";\n\n// 是否低等级设备\nexport const isLowEndDevice = function(): boolean {\n    // If number of logical processors available to run threads <= 4\n    if (getCpu() && getCpu() <= 4) {\n        return true;\n    }\n    // If the approximate amount of RAM client device has <= 4\n    if (getMem() && getMem() <= 4) {\n        return true;\n    }\n\n    return false;\n}\n\n// 是否低体验设备\nexport const isLowEndExperience = function(): boolean {\n    if (!WNav.connection || typeof WNav.connection !== 'object') return true;\n\n    const effectiveType: EffectiveConnectionType = (WNav.connection as any).effectiveType;\n    \n    if (['lte', 'slow-2g', '2g', '3g'].includes(effectiveType) || isLowEndDevice) return true;\n\n    return false;\n}\n","import { D } from '../data/constants';\n\nexport const visibility = {\n  isHidden: false,\n};\n\n/**\n * From visibilitychange listener it saves only when\n * the page gets hidden, because it's important to not\n * use the wrong \"hidden\" value when send timing or logging.\n */\nexport const didVisibilityChange = function (cb: Function) {\n  if (D.hidden) {\n    cb();\n    visibility.isHidden = D.hidden;\n  }\n};","import { YMonitorConfig } from '../typings'\n\nexport const config: YMonitorConfig = {\n    isPerformanceTiming: true,\n    isResoureTiming: true,\n    isErrorCapture: true,\n    maxTime: 15000,\n    report: null,\n    analyticsTracker: null,\n}","import { AskPriority, YMonitorReport, ReportOtions } from '../typings'\nimport { config } from '../config'\nimport { W, WNav } from './constants'\nimport { visibility, pushTask, getNavgatorInfo, getNetworkInfo, getVitalScope } from '../helps'\n\nexport class Report implements YMonitorReport {\n    private upUrl: string\n\n    constructor(options: ReportOtions) {\n        if (!options.upUrl) {\n            throw Error('监控sdk需提供上报uri!')\n        }\n        this.upUrl = options.upUrl\n    }\n\n    /**\n     * 统一上报方法\n     * @param level - 上报等级\n     * @param data - 上报数据\n     * @param uri - 上报uri\n     */\n    sendToAnalytics(level: AskPriority, data: string, uri?: string): void {\n        const upUrl = uri || this.upUrl\n\n        // 高优先级处理\n        if (level === AskPriority.URGENT) {\n            if (!!W.fetch) {\n                fetch(upUrl, { method: 'post', body: data, keepalive: true })\n            } else {\n                let xhr: XMLHttpRequest = new XMLHttpRequest()\n                xhr.open('post', upUrl, true)\n                xhr.setRequestHeader('Content-Type', 'application/json')\n                xhr.send(data)\n                xhr.onload = function () {\n                    if (this.status === 200 || this.status === 304) {\n                        console.log('xhr response', this.response)\n                    }\n                    //及时清理以防多次创建\n                    xhr = null\n                }\n            }\n        } else if (level === AskPriority.IDLE) {\n            if (!!WNav.sendBeacon) {\n                WNav.sendBeacon(upUrl, data)\n            } else {\n                let img: HTMLImageElement = new Image()\n                img.src = `${upUrl}?body=${data}`\n                img.onload = function () {\n                    //统计完成收回创建的元素防止内存泄露\n                    img = null\n                }\n            }\n        }\n    }\n\n    /**\n     * 性能上报方法\n     * @param metricName - 性能指标\n     * @param data - 性能数据\n     * @param customProperties - 自定义数据\n     */\n    static reportPerformance(metricName: string, data: any, customProperties?: object) {\n        pushTask(() => {\n            if ((visibility.isHidden && metricName.indexOf('Final') < 0) || !config.analyticsTracker) return\n            config.analyticsTracker({\n                data,\n                metricName,\n                customProperties,\n                score: getVitalScope(metricName, data),\n                netWorkInfo: getNetworkInfo(),\n                navigatorInfo: getNavgatorInfo(),\n            })\n        })\n    }\n}\n","import { YNavigatorInfo } from \"../typings\";\nimport { WNav, getMem, getCpu } from '../data/constants';\nimport { isLowEndDevice, isLowEndExperience } from './isLowEnd';\n\n/**\n * 如下信息来源于 window.navigator:\n * 1. Device Memory\n * 2. Hardware Concurency\n * 3. Status of the service worker:\n *     - controlled: a service worker is controlling the page\n *     - supported: the browser supports service worker\n *     - unsupported: the user's browser does not support service worker\n */\nexport const getNavgatorInfo = function(): YNavigatorInfo {\n    if (!WNav) return {};\n\n    return {\n        appName: WNav.appName,\n        appVersion: WNav.appVersion,\n        deviceMemory: getMem() || 0,\n        hardwareConcurrency: getCpu() || 0,\n        isLowEndDevice: isLowEndDevice(),\n        isLowEndExperience: isLowEndExperience(),\n        serviceWorkerStatus: \n            'serviceWorker' in WNav ? \n                WNav.serviceWorker!.controller ? \n                'controlled'\n                : 'supported'\n            : 'unSupported',\n    }\n}","import { Report } from './report';\nimport { config } from '../config';\nimport { formatByTwo } from '../helps';\n\nexport const logInfo = (measureName: string, data: any, customProperties?: object) => {\n    Object.keys(data).forEach((key) => {\n        if (typeof data[key] === 'number') {\n            data[key] = formatByTwo(data[key]);\n        }\n    });\n    // Sends the metric to an external tracking service\n    Report.reportPerformance(measureName, data, customProperties);\n}\n\nexport const logMetric = (measureName: string, data: any, customProperties?: object) => {\n    const duration2Decimal = formatByTwo(data);\n    if (duration2Decimal >= 0 && duration2Decimal <= config.maxTime) {\n        Report.reportPerformance(measureName, duration2Decimal, customProperties);\n    }\n}","import { YMetricMap, YConsumption } from '../typings'\n\n// 测量指标数据\nexport const metrics: YMetricMap = {\n    fid: 0, // 首次输入延迟 -- first input delay\n    fcp: 0, // 首次有内容渲染耗时 -- first contentful paint\n    lcp: 0, // 最大内容渲染耗时 -- largest contentful paint \n    cls: 0, // 累计位移偏移 -- cumulative layout shift\n    tbt: 0, // 阻塞总时间 -- total blocking time\n}\n// 测试资源耗时\nexport const rt: { value: YConsumption} = {\n    value: {\n        css: 0,\n        img: 0,\n        other: 0,\n        script: 0,\n        total: 0,\n        beacon: 0,\n        fetch: 0,\n        xmlhttprequest: 0,\n    }\n}","import { YAnalyticsTrackerOptions } from \"../typings\";\n\n// 自定义分析器\nexport const analyticsTracker = function(options: YAnalyticsTrackerOptions) {\n    console.log('analyticsTracker', options);\n}","import { YPerObservers, YPerformanceObserverType } from '../typings';\nimport { C } from '../data';\n\nclass PerformanceObserve {\n    private perfObserveMap: YPerObservers;\n\n    constructor() {\n        this.perfObserveMap = new Map();\n    }\n\n    // 观察单个性能指标\n    poConnect(observeType: YPerformanceObserverType, cb: (args: any[]) => void) {\n        try {\n            const perfObserver = new PerformanceObserver(entryList => {\n                cb(entryList.getEntries());\n            });\n\n            // 订阅时间或者开始计时 buffered不立即执行在内存中留下PerformanceObserver实例\n            perfObserver.observe({ type: observeType, buffered: true });\n            this.perfObserveMap.set(observeType, perfObserver);\n        } catch(msg) {\n            C.warn('poConnect warn', msg);\n        }\n    }\n\n    // 断开观察单个性能指标\n    poDisconnect(observeType: any) {\n        if (this.perfObserveMap.get(observeType)) {\n            this.perfObserveMap.get(observeType).disconnect();\n            this.perfObserveMap.delete(observeType);\n        }\n    }\n}\n\nexport const performanceObserver = new PerformanceObserve();","import { YPerformanceEntry } from '../typings';\nimport { logMetric, metrics } from '../data';\nimport { performanceObserver } from './observe';\n\n// 初始化首次绘制\nexport const initPaint = (performanceEntries: YPerformanceEntry[]): void => {\n    performanceEntries.forEach(entry => {\n        if (entry.name === 'first-paint') {\n            logMetric('fp', entry.startTime);\n        } else if (entry.name === 'first-contentful-paint') {\n            metrics.fcp = entry.startTime;\n            logMetric('fcp', metrics.fcp);\n        }\n    });\n}","import { logInfo } from '../data';\nimport { convertToKB } from '../helps';\n\n/**\n * The estimate() method of the StorageManager interface asks the Storage Manager\n * for how much storage the app takes up (usage),\n * and how much space is available (quota).\n */\nexport const getStorageEstimate = (storageInfo: StorageEstimate) => {\n    const estimateUsageDetails = (storageInfo as any).useageDetails || {};\n\n    logInfo('storageEstimate', {\n        quota: convertToKB(storageInfo.quota),\n        usage: convertToKB(storageInfo.usage),\n        caches: convertToKB(estimateUsageDetails.caches),\n        indexedDB: convertToKB(estimateUsageDetails.indexedDB),\n        ServiceWorker: convertToKB(estimateUsageDetails.ServiceWorker),\n    });\n}","import { config } from '../config';\nimport { isEstimateSupported, isVisibleChangeSupported, didVisibilityChange } from '../helps';\nimport { WNav, D, metrics, logMetric, logInfo } from '../data';\nimport { performanceObserver } from './observe';\nimport  { initPaint } from './paint';\nimport { getNavigationTiming } from './navigationTiming';\nimport { getStorageEstimate } from './storageEstimate';\n\n// 根据参数监听相关指标\nconst initPerformanceObserver = (): void => {\n    console.log('⏰ 性能收集开始', Math.random())\n    performanceObserver.poConnect('paint', initPaint)\n    // performanceObserver.poConnect('first-input-delay', initFirstInputDelay);\n    // performanceObserver.poConnect('largest-contentful-paint', initLargestContentfulPaint);\n    // performanceObserver.poConnect('cumulative-layout-shift', initCumulativeLayoutShift);\n\n    // if (config.isResoureTiming) {\n    //     performanceObserver.poConnect('resource', initResource);\n    // }\n    // if (config.isPerformanceTiming) {\n    //     performanceObserver.poConnect('element', initElement);\n    // }\n}\n\n// 根据相关检测指标解除监听\nconst disconnectPerformanceObserve = (args: string[] | string): void => {\n    const list = Array.isArray(args) ? args : [args];\n\n    list.forEach(metric => {\n        performanceObserver.poDisconnect(metric);\n        logMetric(metric, metrics[metric]);\n    });\n}\n\n// 初始化性能监控\nexport const initPerformanceTraceEntry = (): void => {\n    //监控相关指标\n    initPerformanceObserver();\n\n    //页面性能\n    logInfo('navigationTiming', getNavigationTiming());\n\n    //管理离线缓存数据\n    if (isEstimateSupported()) {\n        WNav.storage.estimate().then(getStorageEstimate);\n    }\n\n    //页面切换时解除观察\n    if (isVisibleChangeSupported()) {\n        D.addEventListener('visibilitychange', didVisibilityChange.bind(this, disconnectPerformanceObserveHidden));\n    }\n}\n\n// 页面隐藏时解除监听性能指标\nexport const disconnectPerformanceObserveHidden = (): void => {\n    disconnectPerformanceObserve(['paint']);\n}","import { YNavigationTiming } from '../typings';\nimport { isPerformanceSupported } from '../helps/isSupported';\n\n/**\n * Navigation Timing API provides performance metrics for HTML documents.\n * w3c.github.io/navigation-timing/\n * developers.google.com/web/fundamentals/performance/navigation-and-resource-timing\n */\nexport const getNavigationTiming = ():YNavigationTiming => {\n    // 不支持性能检测api直接返回\n    if (!isPerformanceSupported) return {};\n\n    // 这里直接的物理赋值performance.timing 已被弃用\n    const t = performance.getEntriesByType('navigation')[0] as any;\n    if (!t) return {};\n\n    const responseStart = t.responseStart;\n    const responseEnd = t.responseEnd;\n\n    return {\n        // fetchStart marks when the browser starts to fetch a resource\n        // responseEnd marks when the last byte of the response arrives\n        fetchTime: responseEnd - t.fetchStart || 0,\n        // serviecworker time plus response time\n        workerTime: t.workerStart ? responseEnd - t.workerStart : 0,\n        // requset plus response time (network noly)\n        totalTime: responseEnd - t.requestStart || 0,\n        // response time only \n        downloadTime: responseEnd - responseStart || 0,\n        // TTFB\n        timeToFirstByte: responseStart - t.fetchStart || 0,\n        // http header size\n        headerSize: t.transferSize - t.encodedBodySize || 0,\n        // DNS解析时间\n        dnsLookupTime: t.dnsLookupTimeEnd - t.dnsLookupTimeStart || 0,\n        // tcp建立链接时间\n        tcpTime: t.connectEnd - t.connectStart || 0,\n        // 白屏时间\n        whiteTime: responseStart - t.navigationStart || 0,\n        // 页面渲染dom时间\n        domTime: t.domContentLoadedEventEnd - t.navigationStart || 0,\n        // 页面加载时间\n        loadTime: t.loadEventEnd - t.navigationStart || 0,\n        // DOM解析时间\n        parseDomTime: t.domComplete - t.domInteractive || 0,\n    }\n}","import record from 'rrweb/lib/record/rrweb-record'\nimport { AskPriority, ErrorType } from '../typings'\nimport { config } from '../config'\nimport { W } from '../data'\n\nexport default class ErrorTrace {\n    // 上报的错误信息\n    private errorInfo\n    // rrweb录播的信息\n    private recordEvents\n\n    constructor() {\n        this.recordEvents = [];\n    }\n\n    // rrweb录播形象方法\n    private recordAction() {\n        const _this = this;\n        record({\n            emit(event, isCheckout) {\n                // isCheckout 是一个标识，告诉你重新制作了快照\n                if (isCheckout) _this.recordEvents = []\n\n                _this.recordEvents.push(event)\n            },\n            checkoutEveryNth: 100, // 每 100个event 重新制作快照\n            checkoutEveryNms: 5 * 60 * 1000, // 每5分钟重新制作快照\n        })\n    }\n\n    // 监控全局同步和异步的异常\n    private grobalError() {\n        W.onerror = (event: Event, source?: string, lineno?: number, colno?: number, error?: Error): boolean => {\n            console.log('[ ❌全局捕获错误 ]', error)\n            //通过错误信息还原sourcemap源文件地址\n            const errorInfo = JSON.stringify({\n                source,\n                lineno,\n                colno,\n                error,\n                type: ErrorType[1],\n            })\n            config.report.sendToAnalytics(AskPriority.IDLE, errorInfo)\n            return true\n        }\n    }\n\n    // 监控promise异常\n    private promiseError() {\n        W.addEventListener('unhandledrejection', function (e) {\n            console.log('[ ❌promise捕获错误 ]', e)\n            e.preventDefault()\n            // 上报primise异常\n            const errorInfo = JSON.stringify({\n                e,\n                type: ErrorType[2],\n            })\n            config.report.sendToAnalytics(AskPriority.IDLE, errorInfo)\n            return true\n        })\n    }\n\n    // 监控资源请求异常\n    private networkError() {\n        W.addEventListener(\n            'error',\n            function (e: ErrorEvent) {\n                if (e.target !== W) {\n                    console.log('[ ❌资源请求捕获错误 ]', e.target)\n                    const errorInfo = JSON.stringify({\n                        e,\n                        type: ErrorType[2],\n                    })\n                    config.report.sendToAnalytics(AskPriority.IDLE, errorInfo)\n                }\n            },\n            true\n        )\n    }\n\n    // 重写console.error\n    private consoleErrorReflect() {\n        const consoleError = W.console.error\n\n        W.console.error = function () {\n            console.log('[ ❌console.error捕获错误 ]')\n            //config.report.sendToAnalytics(AskPriority.IDLE, errorInfo);\n            consoleError.apply(W, [...arguments])\n        }\n    }\n\n    // 初始化异常监听\n    public run() {\n        this.recordAction()\n        this.grobalError()\n        this.promiseError()\n        this.networkError()\n        this.consoleErrorReflect()\n    }\n}\n","/**\n * 一款开源的性能、异常监控sdk\n * @remarks\n * 目前支持监控的性能指标：FCP、LCP、FID、TBT、CLS\n * @packageDocumentation\n */\n\nimport { YMonitorOptions, YMonitorConfig, YMonitorReport } from './typings'\nimport { isPerformanceSupported } from './helps'\nimport { Report, analyticsTracker } from './data'\nimport { initPerformanceTraceEntry } from './performance'\nimport { config } from './config'\nimport ErrorTrace from './error'\n\nexport class YMonitor {\n    private version: string = '0.0.1'\n    private report: YMonitorReport\n\n    constructor(options: YMonitorOptions) {\n        if (!options.upUrl) {\n            throw Error(`监控sdk-${this.version}需提供上报uri!`)\n        }\n\n        Object.assign(config, options)\n        config.report = new Report({ upUrl: options.upUrl })\n        config.analyticsTracker = config.analyticsTracker || analyticsTracker\n        // 对外暴露上报接口\n        this.report = config.report\n\n        // 初始化\n        this.initErrorMonitor(config)\n        this.initPerformanceMonitor(config)\n    }\n\n    // 初始化异常监控\n    initErrorMonitor(args: YMonitorConfig) {\n        if (!args.isErrorCapture) return\n\n        new ErrorTrace().run()\n    }\n\n    // 初始化性能监控\n    initPerformanceMonitor(args: YMonitorConfig) {\n        //如果浏览器不支持性能指标或者未开启则放弃\n        if (!isPerformanceSupported() || !args.isPerformanceTiming) return\n\n        //浏览器支持的起FRP这样的Observer统计性能\n        initPerformanceTraceEntry()\n    }\n}\n"],"names":["AskPriority","ErrorType","W","window","D","document","C","console","WNav","navigator","WPer","performance","getMem","deviceMemory","getCpu","hardwareConcurrency","formatByTwo","num","parseFloat","toFixed","convertToKB","byte","Math","pow","isPerformanceSupported","getEntriesByType","now","mark","PerformanceObserver","fcpScope","lcpScope","fidScope","clsScope","tbtScope","webVitalsScore","fp","fcp","lcp","lcpFinal","fid","fidVital","cls","clsFinal","tbt","tbt5s","tbt10s","tbtFinal","getNetworkInfo","connection","rtt","downlink","saveData","effectiveType","isLowEndDevice","visibility","isHidden","didVisibilityChange","cb","hidden","config","isPerformanceTiming","isResoureTiming","isErrorCapture","maxTime","report","analyticsTracker","Report","options","upUrl","Error","this","sendToAnalytics","level","data","uri","URGENT","fetch","method","body","keepalive","xhr","XMLHttpRequest","open","setRequestHeader","send","onload","status","log","response","IDLE","sendBeacon","img","Image","src","reportPerformance","metricName","customProperties","measureName","value","indexOf","score","netWorkInfo","navigatorInfo","appName","appVersion","isLowEndExperience","includes","serviceWorkerStatus","serviceWorker","controller","requestIdleCallback","timeOut","logInfo","Object","keys","forEach","key","logMetric","duration2Decimal","metrics","performanceObserver","perfObserveMap","Map","poConnect","observeType","perfObserver","entryList","getEntries","observe","type","buffered","set","msg","warn","poDisconnect","get","disconnect","initPaint","performanceEntries","entry","name","startTime","getStorageEstimate","storageInfo","estimateUsageDetails","useageDetails","quota","usage","caches","indexedDB","ServiceWorker","initPerformanceTraceEntry","random","t","responseStart","responseEnd","fetchTime","fetchStart","workerTime","workerStart","totalTime","requestStart","downloadTime","timeToFirstByte","headerSize","transferSize","encodedBodySize","dnsLookupTime","dnsLookupTimeEnd","dnsLookupTimeStart","tcpTime","connectEnd","connectStart","whiteTime","navigationStart","domTime","domContentLoadedEventEnd","loadTime","loadEventEnd","parseDomTime","domComplete","domInteractive","getNavigationTiming","storage","estimate","then","addEventListener","bind","disconnectPerformanceObserveHidden","args","Array","isArray","metric","ErrorTrace","recordEvents","recordAction","_this","record","emit","event","isCheckout","push","checkoutEveryNth","checkoutEveryNms","grobalError","onerror","source","lineno","colno","error","errorInfo","JSON","stringify","promiseError","e","preventDefault","networkError","target","consoleErrorReflect","consoleError","apply","arguments","run","YMonitor","version","assign","initErrorMonitor","initPerformanceMonitor"],"mappings":"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"}